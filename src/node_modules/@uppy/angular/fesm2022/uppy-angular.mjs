import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';
import Dashboard from '@uppy/dashboard';
import { Uppy } from '@uppy/core';
import ProgressBar from '@uppy/progress-bar';
import StatusBar from '@uppy/status-bar';
import DragDrop from '@uppy/drag-drop';

class UppyAngularWrapper {
    onMount(defaultOptions, plugin) {
        this.options = {
            ...defaultOptions,
            ...this.props,
        };
        this.uppy.use(plugin, this.options);
        this.plugin = this.uppy.getPlugin(this.options.id);
    }
    handleChanges(changes, plugin) {
        // Without the last part of this conditional, it tries to uninstall before the plugin is mounted
        if (changes['uppy'] && this.uppy !== changes['uppy'].previousValue && changes['uppy'].previousValue !== undefined) {
            this.uninstall(changes['uppy'].previousValue);
            this.uppy.use(plugin, this.options);
        }
        this.options = { ...this.options, ...this.props };
        this.plugin = this.uppy.getPlugin(this.options.id);
        if (changes['props'] && this.props !== changes['props'].previousValue && changes['props'].previousValue !== undefined) {
            this.plugin.setOptions({ ...this.options });
        }
    }
    uninstall(uppy = this.uppy) {
        uppy.removePlugin(this.plugin);
    }
}

class DashboardComponent extends UppyAngularWrapper {
    constructor(el) {
        super();
        this.el = el;
        this.uppy = new Uppy;
        this.props = {};
    }
    ngOnInit() {
        this.onMount({ id: 'angular:Dashboard', inline: true, target: this.el.nativeElement }, Dashboard);
    }
    ngOnChanges(changes) {
        this.handleChanges(changes, Dashboard);
    }
    ngOnDestroy() {
        this.uninstall();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: DashboardComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.1", type: DashboardComponent, selector: "uppy-dashboard", inputs: { uppy: "uppy", props: "props" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: DashboardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'uppy-dashboard',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { uppy: [{
                type: Input
            }], props: [{
                type: Input
            }] } });

const COMPONENTS$4 = [DashboardComponent];
class UppyAngularDashboardModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDashboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDashboardModule, declarations: [DashboardComponent], exports: [DashboardComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDashboardModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDashboardModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: COMPONENTS$4,
                    exports: COMPONENTS$4
                }]
        }] });

class DashboardModalComponent extends UppyAngularWrapper {
    constructor(el) {
        super();
        this.el = el;
        this.uppy = new Uppy;
        this.props = {};
        this.open = false;
    }
    ngOnInit() {
        this.onMount({
            id: 'angular:DashboardModal',
            inline: false,
            target: this.el.nativeElement
        }, Dashboard);
    }
    ngOnChanges(changes) {
        this.handleChanges(changes, Dashboard);
        // Handle dashboard-modal specific changes
        if (changes['open'] && this.open !== changes['open'].previousValue) {
            if (this.open && !changes['open'].previousValue) {
                this.plugin.openModal();
            }
            if (!this.open && changes['open'].previousValue) {
                this.plugin.closeModal();
            }
        }
    }
    ngOnDestroy() {
        this.uninstall();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: DashboardModalComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.1", type: DashboardModalComponent, selector: "uppy-dashboard-modal", inputs: { uppy: "uppy", props: "props", open: "open" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: DashboardModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'uppy-dashboard-modal',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { uppy: [{
                type: Input
            }], props: [{
                type: Input
            }], open: [{
                type: Input
            }] } });

const COMPONENTS$3 = [DashboardModalComponent];
class UppyAngularDashboardModalModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDashboardModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDashboardModalModule, declarations: [DashboardModalComponent], exports: [DashboardModalComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDashboardModalModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDashboardModalModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: COMPONENTS$3,
                    exports: COMPONENTS$3
                }]
        }] });

class ProgressBarComponent extends UppyAngularWrapper {
    constructor(el) {
        super();
        this.el = el;
        this.uppy = new Uppy;
        this.props = {};
    }
    ngOnInit() {
        this.onMount({ id: 'angular:ProgressBar', target: this.el.nativeElement }, ProgressBar);
    }
    ngOnChanges(changes) {
        this.handleChanges(changes, ProgressBar);
    }
    ngOnDestroy() {
        this.uninstall();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: ProgressBarComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.1", type: ProgressBarComponent, selector: "uppy-progress-bar", inputs: { uppy: "uppy", props: "props" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: ProgressBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'uppy-progress-bar',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { uppy: [{
                type: Input
            }], props: [{
                type: Input
            }] } });

const COMPONENTS$2 = [ProgressBarComponent];
class UppyAngularProgressBarModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularProgressBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularProgressBarModule, declarations: [ProgressBarComponent], exports: [ProgressBarComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularProgressBarModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularProgressBarModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: COMPONENTS$2,
                    exports: COMPONENTS$2
                }]
        }] });

class StatusBarComponent extends UppyAngularWrapper {
    constructor(el) {
        super();
        this.el = el;
        this.uppy = new Uppy;
        this.props = {};
    }
    ngOnInit() {
        this.onMount({ id: 'angular:StatusBar', target: this.el.nativeElement }, StatusBar);
    }
    ngOnChanges(changes) {
        this.handleChanges(changes, StatusBar);
    }
    ngOnDestroy() {
        this.uninstall();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: StatusBarComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.1", type: StatusBarComponent, selector: "uppy-status-bar", inputs: { uppy: "uppy", props: "props" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: StatusBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'uppy-status-bar',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { uppy: [{
                type: Input
            }], props: [{
                type: Input
            }] } });

const COMPONENTS$1 = [StatusBarComponent];
class UppyAngularStatusBarModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularStatusBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularStatusBarModule, declarations: [StatusBarComponent], exports: [StatusBarComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularStatusBarModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularStatusBarModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: COMPONENTS$1,
                    exports: COMPONENTS$1
                }]
        }] });

class DragDropComponent extends UppyAngularWrapper {
    constructor(el) {
        super();
        this.el = el;
        this.uppy = new Uppy;
        this.props = {};
    }
    ngOnInit() {
        this.onMount({ id: 'angular:DragDrop', target: this.el.nativeElement }, DragDrop);
    }
    ngOnChanges(changes) {
        this.handleChanges(changes, DragDrop);
    }
    ngOnDestroy() {
        this.uninstall();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: DragDropComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.1", type: DragDropComponent, selector: "uppy-drag-drop", inputs: { uppy: "uppy", props: "props" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: DragDropComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'uppy-drag-drop',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { uppy: [{
                type: Input
            }], props: [{
                type: Input
            }] } });

const COMPONENTS = [DragDropComponent];
class UppyAngularDragDropModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDragDropModule, declarations: [DragDropComponent], exports: [DragDropComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDragDropModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: UppyAngularDragDropModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: COMPONENTS,
                    exports: COMPONENTS
                }]
        }] });

/*
 * Public API Surface of @uppy/angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DashboardComponent, DashboardModalComponent, DragDropComponent, ProgressBarComponent, StatusBarComponent, UppyAngularDashboardModalModule, UppyAngularDashboardModule, UppyAngularDragDropModule, UppyAngularProgressBarModule, UppyAngularStatusBarModule };
//# sourceMappingURL=uppy-angular.mjs.map
